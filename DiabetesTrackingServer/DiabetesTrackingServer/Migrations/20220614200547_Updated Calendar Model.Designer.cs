// <auto-generated />
using System;
using DiabetesTrackingServer.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DiabetesTrackingServer.Migrations
{
    [DbContext(typeof(DiabetesTrackingContext))]
    [Migration("20220614200547_Updated Calendar Model")]
    partial class UpdatedCalendarModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.DiabetesPrediction", b =>
                {
                    b.Property<Guid>("PredictionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<float>("BMI")
                        .HasColumnType("real");

                    b.Property<float>("DiabetesPedigree")
                        .HasColumnType("real");

                    b.Property<int>("Diabetic")
                        .HasColumnType("int");

                    b.Property<int>("DiastolicBloodPressure")
                        .HasColumnType("int");

                    b.Property<int>("PlasmaGlucose")
                        .HasColumnType("int");

                    b.Property<int>("Pregnancies")
                        .HasColumnType("int");

                    b.Property<int>("SerumInsulin")
                        .HasColumnType("int");

                    b.Property<int>("TricepsThickness")
                        .HasColumnType("int");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PredictionId");

                    b.HasIndex("UserId");

                    b.ToTable("Predictions");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.GlucoseLog", b =>
                {
                    b.Property<Guid>("GlucoseLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("GlucoseLevel")
                        .HasColumnType("real");

                    b.Property<DateTime>("LoggedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhenWasLogged")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GlucoseLogId");

                    b.HasIndex("UserId");

                    b.ToTable("GlucoseLogs");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.InsulinLog", b =>
                {
                    b.Property<Guid>("InsulinLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("InsulinIntake")
                        .HasColumnType("real");

                    b.Property<DateTime>("LoggedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WhenWasInjected")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InsulinLogId");

                    b.HasIndex("UserId");

                    b.ToTable("InsulinLogs");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.SportLog", b =>
                {
                    b.Property<Guid>("SportLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("Duration")
                        .HasColumnType("real");

                    b.Property<DateTime>("LoggedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("TypeOfActivity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("SportLogId");

                    b.HasIndex("UserId");

                    b.ToTable("SportLogs");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DiabetesType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("HasDiabetes")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.DiabetesPrediction", b =>
                {
                    b.HasOne("DiabetesTrackingServer.ViewModels.User", "User")
                        .WithMany("Predictions")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.Event", b =>
                {
                    b.HasOne("DiabetesTrackingServer.ViewModels.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.GlucoseLog", b =>
                {
                    b.HasOne("DiabetesTrackingServer.ViewModels.User", "User")
                        .WithMany("GlucoseLogs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.InsulinLog", b =>
                {
                    b.HasOne("DiabetesTrackingServer.ViewModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.SportLog", b =>
                {
                    b.HasOne("DiabetesTrackingServer.ViewModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DiabetesTrackingServer.ViewModels.User", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("GlucoseLogs");

                    b.Navigation("Predictions");
                });
#pragma warning restore 612, 618
        }
    }
}
